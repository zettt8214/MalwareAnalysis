
import xml.etree.cElementTree as ET
import subprocess
from lib.errorhandel import ErrorHandler
from lib.config import *
import os



class ProLogParse():
    '''

    '''
    def __init__(self, pml_path):
        self.pml_path = pml_path
        self.log = ErrorHandler()
        self.xml_path = ""
        self.file_activity = []
        self.net_activity = []
        self.reg_activity = []
        self.process_created = []

    def generate_xml_from_pml(self, outfile_path):
        '''
        Procmon64.exe /openlog ..\..\result\log.pml /LoadConfig ..\ProcmonConfiguration.pmc /SaveApplyFilter /SaveAs log.xml
        :param pml_path:
        :return:
        '''
        self.log.error_log(0, "Generate xml log...")
        command = procexe_path + " /openlog " +self.pml_path + " /LoadConfig "+ proc_conifg + " /SaveApplyFilter /SaveAs " + outfile_path

        status, output = subprocess.getstatusoutput(command)
        if status == 0:
            self.log.error_log(1, "Sucess: Generate the xml log " + outfile_path)
            self.xml_path = outfile_path
        else:
            self.log.error_log(4, "Failed to generate the xml log")

    def procmon_log_xml_parse(self):
        if self.xml_path != "":

            class Process(object):
                def __init__(self):
                    pass

            class Activity(object):
                def __init__(self):
                    pass

            self.log.error_log(0, "Start to parse procmon log")
            tree = ET.parse(self.xml_path)
            root = tree.getroot()

            proc = {}

            for process in root.iter("process"):
                temp = {}
                temp["pid"] = process[1].text
                temp["ppid"] = process[2].text
                temp["process_name"] = process[11].text
                temp["cmd_line"] = process[13].text
                self.process_created.append(temp)

            for event in root.iter("event"):
                temp = {}
                temp["time"] = event[1].text
                temp["process_name"] = event[2].text
                temp["pid"] = event[3].text
                temp["operation"] = event[4].text
                temp["path"] = event[5].text

                if temp["operation"] == "CreateFile" or temp["operation"] == "WriteFile":
                    self.file_activity.append(temp)
                elif (temp["operation"] == "TCP Connect" or temp["operation"] == "TCP Receive" or temp["operation"] == "UDP Send" or temp["operation"] == "UDP Receive"):
                    self.net_activity.append(temp)
                elif temp["operation"] == "RegDeleteKey" or temp["operation"] == "RegDeleteValue" or temp["operation"] == "RegCreateKey" or temp["operation"] == "RegSetValue":
                    self.reg_activity.append(temp)

        else:
            self.log.error_log(4,"Please make xml logs first!")

    def get_procid(self, mal_pid):
        queue = []
        queue.insert(0, mal_pid)

        proc_pid_list = []

        while len(queue) > 0:
            pid = queue.pop()
            proc_pid_list.append(pid)
            for process in self.process_created:
                if process["ppid"] == pid:
                    queue.insert(0, process["pid"])
        return proc_pid_list

    def show_log(self, file, mal_name):
        mal_pid = ""
        for process in self.process_created:
            if mal_name == process["process_name"]:
                mal_pid = process["pid"]

        if mal_pid == "":
            self.log.error_log(4, "Can not find the malware.")


        proc_pid = self.get_procid(mal_pid)

        for process in self.process_created:
            if process["ppid"] == mal_pid:
                proc_pid.append(process["pid"])


        with open(file, "a+") as f:
            print("-------------------------------\r\n", file = f)
            print("Procmon Result:", file=f)
            print("\r\nProcess Created", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s" % ("PID", "PPID", "Proc_Name", "CMD_Line"), file=f)
            for i in self.process_created:
                if i["pid"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s " % (i["pid"], i["ppid"], i["process_name"], i["cmd_line"]), file=f)

            print("\r\nNetwork Activities", file = f)
            print("================================", file = f)
            print("%-25s %-25s %-25s %-25s %-25s" % ("Time", "Proc_Name", "PID", "Operation", "Path"), file = f)
            for i in self.net_activity:
                if i["pid"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s %-25s" % (i["time"], i["process_name"], i["pid"], i["operation"], i["path"]), file = f)

            print("\r\nReg Activities", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s %-25s" % ("Time", "Proc_Name", "PID", "Operation", "Path"), file=f)
            for i in self.reg_activity:
                if i["pid"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s %-25s" % (
                        i["time"], i["process_name"], i["pid"], i["operation"], i["path"]), file=f)


            print("\r\nFile Activities", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s %-25s" % ("Time", "Proc_Name", "PID", "Operation", "Path"), file=f)
            for i in self.file_activity:
                if i["pid"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s %-25s" % (
                        i["time"], i["process_name"], i["pid"], i["operation"], i["path"]), file=f)

            print("-------------------------------\r\n", file = f)



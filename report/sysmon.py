import xml.etree.cElementTree as ET
import subprocess
from lib.errorhandel import ErrorHandler
from lib.config import *
import os

class SysmonLogParse():
    def __init__(self, event_log_path):
        self.event_log_path = event_log_path
        self.log = ErrorHandler()
        self.process_created = []
        self.network = []
        self.file_created = []
        self.reg = []
        self.file_stream =[]

    def process_creation(self, event):
        '''
        EventID = 1
        :param event:
        :return:
        '''
        data = {}

        data["UtcTime"] = event[1][1].text
        data["ProcessGuid"] = event[1][2].text
        data["ProcessId"] = event[1][3].text
        data["Image"] = event[1][4].text
        data["CommandLine"] = event[1][10].text
        data["ParentProcessGuid"] = event[1][18].text
        data["ParentProcessId"] = event[1][19].text
        data["ParentImage"] = event[1][20].text
        data["ParentCommandLine"] = event[1][21].text
        self.process_created.append(data)

    def network_connections(self, event):
        '''
        EventID = 3
        :param event:
        :return:
        '''
        data = {}

        data["UtcTime"] = event[1][1].text
        data["ProcessGuid"] = event[1][2].text
        data["ProcessId"] = event[1][3].text
        data["Image"] = event[1][4].text
        data["Protocol"] = event[1][6].text
        data["SourceIp"] = event[1][9].text
        data["SourceHostname"] = event[1][10].text
        data["SourcePort"] = event[1][11].text
        data["SourcePortName"] = event[1][12].text
        data["DestinationIp"] = event[1][14].text
        data["DestinationHostname"] = event[1][15].text
        data["DestinationPort"] = event[1][16].text
        data["DestinationPortName"] = event[1][17].text

        self.network.append(data)

    def file_creation(self,event):
        '''
        Eventid = 11
        :return:
        '''
        data = {}


        data["UtcTime"] = event[1][1].text
        data["ProcessGuid"] = event[1][2].text
        data["ProcessId"] = event[1][3].text
        data["Image"] = event[1][4].text
        data["TargetFilename"] = event[1][5].text

        self.file_created.append(data)

    def reg_operation(self, event):
        """
        EventID = 12, 13
        :param event:
        :return:
        """
        data = {}

        data["EventType"] = event[1][1].text
        data["UtcTime"] = event[1][2].text
        data["ProcessGuid"] = event[1][3].text
        data["ProcessId"] = event[1][4].text
        data["Image"] = event[1][5].text
        data["TargetObject"] = event[1][6].text
        data["Details"] = event[1][7].text
        self.reg.append(data)

    def filestream_creation(self, event):
        """
        EventID = 15
        :param event:
        :return:
        """
        data = {}
        data["UtcTime"] = event[1][1].text
        data["ProcessGuid"] = event[1][2].text
        data["ProcessId"] = event[1][3].text
        data["Image"] = event[1][4].text
        data["TargetFilename"] = event[1][5].text

        self.file_stream.append(data)



    def event_parse(self):
        self.log.error_log(0, "Start to parse Sysmon log")
        tree = ET.parse(self.event_log_path)
        root = tree.getroot()
        for event in root:
            if event[0][1].text == "1":
                self.process_creation(event)
            elif event[0][1].text == "3":
                self.network_connections(event)
            elif event[0][1].text == "11":
                self.file_creation(event)
            elif event[0][1].text == "12" or event[0][1].text == "13":
                self.reg_operation(event)
            elif event[0][1].text == "15":
                self.filestream_creation(event)

    def get_procid(self, mal_pid):
        queue = []
        queue.insert(0, mal_pid)

        proc_pid_list = []

        while len(queue) > 0:
            pid = queue.pop()
            proc_pid_list.append(pid)
            for process in self.process_created:
                if process["ParentProcessId"] == pid:
                    queue.insert(0, process["ProcessId"])
        return proc_pid_list

    def show(self, file, mal_name):
        mal_pid = ""
        for process in self.process_created:
            if mal_name in process["Image"]:
                mal_pid = process["ProcessId"]

        if mal_pid == "":
            self.log.error_log(4, "Can not find the malware.")

        proc_pid = self.get_procid(mal_pid)

        print(proc_pid)
        with open(file, "a+") as f:
            print("-------------------------------\r\n", file = f)
            print("Sysmon Result:", file=f)
            print("\r\nProcess Created", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s %-25s" % ("UtcTime", "PID", "Image", "CommandLine", "PPID"), file=f)

            for i in self.process_created:
                if i["ProcessId"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s %-25s" %(i["UtcTime"], i["ProcessId"], i["Image"], i["CommandLine"], i["ParentProcessId"]),file=f)

            print("\r\nNetwork Connections", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s %-25s %-25s %-25s %-25s" % ("UtcTime", "PID", "SourceIp", "SourcePort", "DestinationIp", "DestinationHostname", "DestinationPort", "DestinationPortName"), file=f)
            for i in self.network:
                if i["ProcessId"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s %-25s %-25s %-25s %-25s" % (
                    i["UtcTime"], i["ProcessId"], i["SourceIp"], i["SourcePort"], i["DestinationIp"], i["DestinationHostname"], i["DestinationPort"],
                    i["DestinationPortName"]), file=f)

            print("\r\nReg Operation ", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s %-25s %-25s" % ("EventType", "UtcTime", "ProcessId", "Image", "TargetObject", "Details", ), file=f)
            for i in self.reg:
                if i["ProcessId"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s %-25s %-25s" % (
                        i["EventType"], i["UtcTime"], i["ProcessId"], i["Image"], i["TargetObject"],
                        i["Details"]), file=f)

            print("\r\nFiles creation", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s " % ("UtcTime", "ProcessId", "Image", "TargetFilename",),
                  file=f)
            for i in self.file_created:
                if i["ProcessId"] in proc_pid:
                    print("%-25s  %-25s %-25s %-25s" % (
                        i["UtcTime"], i["ProcessId"], i["Image"], i["TargetFilename"],), file=f)

            print("\r\nFilestream creation", file=f)
            print("================================", file=f)
            print("%-25s %-25s %-25s %-25s %-25s" % ("UtcTime", "ProcessGuid", "ProcessId", "Image", "TargetFilename",), file=f)
            for i in self.file_stream:
                if i["ProcessId"] in proc_pid:
                    print("%-25s %-25s %-25s %-25s %-25s" % (
                        i["UtcTime"], i["ProcessGuid"], i["ProcessId"], i["Image"], i["TargetFilename"],), file=f)

            print("-------------------------------\r\n", file=f)